note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class PLPLOT_FUNCTIONS_API


feature -- Access

	pl_setcontlabelformat (lexp: INTEGER; sigdig: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pl_setcontlabelformat ((PLINT)$lexp, (PLINT)$sigdig);
			]"
		end

	pl_setcontlabelparam (offset: REAL_64; size: REAL_64; spacing: REAL_64; active: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pl_setcontlabelparam ((PLFLT)$offset, (PLFLT)$size, (PLFLT)$spacing, (PLINT)$active);
			]"
		end

	pladv (page: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pladv ((PLINT)$page);
			]"
		end

	plarc (x: REAL_64; y: REAL_64; a: REAL_64; b: REAL_64; angle1: REAL_64; angle2: REAL_64; rotate: REAL_64; fill: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plarc ((PLFLT)$x, (PLFLT)$y, (PLFLT)$a, (PLFLT)$b, (PLFLT)$angle1, (PLFLT)$angle2, (PLFLT)$rotate, (PLBOOL)$fill);
			]"
		end

	plaxes (x0: REAL_64; y0: REAL_64; xopt: STRING; xtick: REAL_64; nxsub: INTEGER; yopt: STRING; ytick: REAL_64; nysub: INTEGER) 
		do
			c_plaxes (x0, y0,  (create {C_STRING}.make (xopt)).item, xtick, nxsub,  (create {C_STRING}.make (yopt)).item, ytick, nysub)
		end

	plbin (nbin: INTEGER; x: POINTER; y: POINTER; opt: INTEGER) 
		do
			c_plbin (nbin, x, y, opt)
		end

	plbtime (year: POINTER; month: POINTER; day: POINTER; hour: POINTER; min: POINTER; sec: POINTER; ctime: REAL_64) 
		do
			c_plbtime (year, month, day, hour, min, sec, ctime)
		end

	plbop
		external
			"C inline use <plplot.h>"
		alias
			"[
				plbop ();
			]"
		end

	plbox (xopt: STRING; xtick: REAL_64; nxsub: INTEGER; yopt: STRING; ytick: REAL_64; nysub: INTEGER) 
		do
			c_plbox ( (create {C_STRING}.make (xopt)).item, xtick, nxsub,  (create {C_STRING}.make (yopt)).item, ytick, nysub)
		end

	plbox3 (xopt: STRING; xlabel: STRING; xtick: REAL_64; nxsub: INTEGER; yopt: STRING; ylabel: STRING; ytick: REAL_64; nysub: INTEGER; zopt: STRING; zlabel: STRING; ztick: REAL_64; nzsub: INTEGER) 
		do
			c_plbox3 ( (create {C_STRING}.make (xopt)).item,  (create {C_STRING}.make (xlabel)).item, xtick, nxsub,  (create {C_STRING}.make (yopt)).item,  (create {C_STRING}.make (ylabel)).item, ytick, nysub,  (create {C_STRING}.make (zopt)).item,  (create {C_STRING}.make (zlabel)).item, ztick, nzsub)
		end

	plcalc_world (rx: REAL_64; ry: REAL_64; wx: POINTER; wy: POINTER; window: POINTER) 
		do
			c_plcalc_world (rx, ry, wx, wy, window)
		end

	plclear
		external
			"C inline use <plplot.h>"
		alias
			"[
				plclear ();
			]"
		end

	plcol0 (icol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plcol0 ((PLINT)$icol0);
			]"
		end

	plcol1 (col1: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plcol1 ((PLFLT)$col1);
			]"
		end

	plconfigtime (scale: REAL_64; offset1: REAL_64; offset2: REAL_64; ccontrol: INTEGER; ifbtime_offset: INTEGER; year: INTEGER; month: INTEGER; day: INTEGER; hour: INTEGER; min: INTEGER; sec: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plconfigtime ((PLFLT)$scale, (PLFLT)$offset1, (PLFLT)$offset2, (PLINT)$ccontrol, (PLBOOL)$ifbtime_offset, (PLINT)$year, (PLINT)$month, (PLINT)$day, (PLINT)$hour, (PLINT)$min, (PLFLT)$sec);
			]"
		end

	plcont (f: POINTER; nx: INTEGER; ny: INTEGER; kx: INTEGER; lx: INTEGER; ky: INTEGER; ly: INTEGER; clevel: POINTER; nlevel: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plcont (f, nx, ny, kx, lx, ky, ly, clevel, nlevel, pltr, pltr_data)
		end

	plcpstrm (iplsr: INTEGER; flags: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plcpstrm ((PLINT)$iplsr, (PLBOOL)$flags);
			]"
		end

	plctime (year: INTEGER; month: INTEGER; day: INTEGER; hour: INTEGER; min: INTEGER; sec: REAL_64; ctime: POINTER) 
		do
			c_plctime (year, month, day, hour, min, sec, ctime)
		end

	plend
		external
			"C inline use <plplot.h>"
		alias
			"[
				plend ();
			]"
		end

	plend1
		external
			"C inline use <plplot.h>"
		alias
			"[
				plend1 ();
			]"
		end

	plenv (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; just: INTEGER; axis: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plenv ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLINT)$just, (PLINT)$axis);
			]"
		end

	plenv0 (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; just: INTEGER; axis: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plenv0 ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLINT)$just, (PLINT)$axis);
			]"
		end

	pleop
		external
			"C inline use <plplot.h>"
		alias
			"[
				pleop ();
			]"
		end

	plerrx (n: INTEGER; xmin: POINTER; xmax: POINTER; y: POINTER) 
		do
			c_plerrx (n, xmin, xmax, y)
		end

	plerry (n: INTEGER; x: POINTER; ymin: POINTER; ymax: POINTER) 
		do
			c_plerry (n, x, ymin, ymax)
		end

	plfamadv
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfamadv ();
			]"
		end

	plfill (n: INTEGER; x: POINTER; y: POINTER) 
		do
			c_plfill (n, x, y)
		end

	plfill3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER) 
		do
			c_plfill3 (n, x, y, z)
		end

	plflush
		external
			"C inline use <plplot.h>"
		alias
			"[
				plflush ();
			]"
		end

	plfont (ifont: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfont ((PLINT)$ifont);
			]"
		end

	plfontld (fnt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfontld ((PLINT)$fnt);
			]"
		end

	plgchr (p_def: POINTER; p_ht: POINTER) 
		do
			c_plgchr (p_def, p_ht)
		end

	plgcmap1_range (min_color: POINTER; max_color: POINTER) 
		do
			c_plgcmap1_range (min_color, max_color)
		end

	plgcol0 (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER) 
		do
			c_plgcol0 (icol0, r, g, b)
		end

	plgcol0a (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER; alpha: POINTER) 
		do
			c_plgcol0a (icol0, r, g, b, alpha)
		end

	plgcolbg (r: POINTER; g: POINTER; b: POINTER) 
		do
			c_plgcolbg (r, g, b)
		end

	plgcolbga (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER) 
		do
			c_plgcolbga (r, g, b, alpha)
		end

	plgcompression (compression: POINTER) 
		do
			c_plgcompression (compression)
		end

	plgdev (p_dev: STRING) 
		do
			c_plgdev ( (create {C_STRING}.make (p_dev)).item)
		end

	plgdidev (p_mar: POINTER; p_aspect: POINTER; p_jx: POINTER; p_jy: POINTER) 
		do
			c_plgdidev (p_mar, p_aspect, p_jx, p_jy)
		end

	plgdiori (p_rot: POINTER) 
		do
			c_plgdiori (p_rot)
		end

	plgdiplt (p_xmin: POINTER; p_ymin: POINTER; p_xmax: POINTER; p_ymax: POINTER) 
		do
			c_plgdiplt (p_xmin, p_ymin, p_xmax, p_ymax)
		end

	plgdrawmode: INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plgdrawmode ();
			]"
		end

	plgfci (p_fci: POINTER) 
		do
			c_plgfci (p_fci)
		end

	plgfam (p_fam: POINTER; p_num: POINTER; p_bmax: POINTER) 
		do
			c_plgfam (p_fam, p_num, p_bmax)
		end

	plgfnam (fnam: STRING) 
		do
			c_plgfnam ( (create {C_STRING}.make (fnam)).item)
		end

	plgfont (p_family: POINTER; p_style: POINTER; p_weight: POINTER) 
		do
			c_plgfont (p_family, p_style, p_weight)
		end

	plglevel (p_level: POINTER) 
		do
			c_plglevel (p_level)
		end

	plgpage (p_xp: POINTER; p_yp: POINTER; p_xleng: POINTER; p_yleng: POINTER; p_xoff: POINTER; p_yoff: POINTER) 
		do
			c_plgpage (p_xp, p_yp, p_xleng, p_yleng, p_xoff, p_yoff)
		end

	plgra
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgra ();
			]"
		end

	plgradient (n: INTEGER; x: POINTER; y: POINTER; angle: REAL_64) 
		do
			c_plgradient (n, x, y, angle)
		end


	plgspa (xmin: POINTER; xmax: POINTER; ymin: POINTER; ymax: POINTER) 
		do
			c_plgspa (xmin, xmax, ymin, ymax)
		end

	plgstrm (p_strm: POINTER) 
		do
			c_plgstrm (p_strm)
		end

	plgver (p_ver: STRING)
		local
			c_str: C_STRING
		do
			create c_str.make (p_ver)
			c_plgver ( c_str.item)
			p_ver.append (c_str.string)
		end

	plgvpd (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER) 
		do
			c_plgvpd (p_xmin, p_xmax, p_ymin, p_ymax)
		end

	plgvpw (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER) 
		do
			c_plgvpw (p_xmin, p_xmax, p_ymin, p_ymax)
		end

	plgxax (p_digmax: POINTER; p_digits: POINTER) 
		do
			c_plgxax (p_digmax, p_digits)
		end

	plgyax (p_digmax: POINTER; p_digits: POINTER) 
		do
			c_plgyax (p_digmax, p_digits)
		end

	plgzax (p_digmax: POINTER; p_digits: POINTER) 
		do
			c_plgzax (p_digmax, p_digits)
		end

	plhist (n: INTEGER; data: POINTER; datmin: REAL_64; datmax: REAL_64; nbin: INTEGER; opt: INTEGER) 
		do
			c_plhist (n, data, datmin, datmax, nbin, opt)
		end

	plhlsrgb (h: REAL_64; l: REAL_64; s: REAL_64; p_r: POINTER; p_g: POINTER; p_b: POINTER) 
		do
			c_plhlsrgb (h, l, s, p_r, p_g, p_b)
		end

	plinit
		external
			"C inline use <plplot.h>"
		alias
			"[
				plinit ();
			]"
		end

	pljoin (x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pljoin ((PLFLT)$x1, (PLFLT)$y1, (PLFLT)$x2, (PLFLT)$y2);
			]"
		end

	pllab (xlabel: STRING; ylabel: STRING; tlabel: STRING) 
		do
			c_pllab ( (create {C_STRING}.make (xlabel)).item,  (create {C_STRING}.make (ylabel)).item,  (create {C_STRING}.make (tlabel)).item)
		end


	plcolorbar (p_colorbar_width: POINTER; p_colorbar_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; x_length: REAL_64; y_length: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; low_cap_color: REAL_64; high_cap_color: REAL_64; cont_color: INTEGER; cont_width: REAL_64; n_labels: INTEGER; label_opts: POINTER; labels: STRING; n_axes: INTEGER; axis_opts: STRING; ticks: POINTER; sub_ticks: POINTER; n_values: POINTER; values: POINTER) 
		do
			c_plcolorbar (p_colorbar_width, p_colorbar_height, opt, position, x, y, x_length, y_length, bg_color, bb_color, bb_style, low_cap_color, high_cap_color, cont_color, cont_width, n_labels, label_opts,  (create {C_STRING}.make (labels)).item, n_axes,  (create {C_STRING}.make (axis_opts)).item, ticks, sub_ticks, n_values, values)
		end

	pllightsource (x: REAL_64; y: REAL_64; z: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pllightsource ((PLFLT)$x, (PLFLT)$y, (PLFLT)$z);
			]"
		end

	plline (n: INTEGER; x: POINTER; y: POINTER) 
		do
			c_plline (n, x, y)
		end

	plline3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER) 
		do
			c_plline3 (n, x, y, z)
		end

	pllsty (lin: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pllsty ((PLINT)$lin);
			]"
		end

	plmap (mapform: POINTER; name: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64) 
		do
			c_plmap (mapform,  (create {C_STRING}.make (name)).item, minx, maxx, miny, maxy)
		end

	plmapline (mapform: POINTER; name: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER) 
		do
			c_plmapline (mapform,  (create {C_STRING}.make (name)).item, minx, maxx, miny, maxy, plotentries, nplotentries)
		end

	plmapstring (mapform: POINTER; name: STRING; string: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER) 
		do
			c_plmapstring (mapform,  (create {C_STRING}.make (name)).item,  (create {C_STRING}.make (string)).item, minx, maxx, miny, maxy, plotentries, nplotentries)
		end

	plmaptex (mapform: POINTER; name: STRING; dx: REAL_64; dy: REAL_64; just: REAL_64; text: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentry: INTEGER) 
		do
			c_plmaptex (mapform,  (create {C_STRING}.make (name)).item, dx, dy, just,  (create {C_STRING}.make (text)).item, minx, maxx, miny, maxy, plotentry)
		end

	plmapfill (mapform: POINTER; name: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER) 
		do
			c_plmapfill (mapform,  (create {C_STRING}.make (name)).item, minx, maxx, miny, maxy, plotentries, nplotentries)
		end

	plmeridians (mapform: POINTER; dlong: REAL_64; dlat: REAL_64; minlong: REAL_64; maxlong: REAL_64; minlat: REAL_64; maxlat: REAL_64) 
		do
			c_plmeridians (mapform, dlong, dlat, minlong, maxlong, minlat, maxlat)
		end

	plmesh (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER) 
		do
			c_plmesh (x, y, z, nx, ny, opt)
		end

	plmeshc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_plmeshc (x, y, z, nx, ny, opt, clevel, nlevel)
		end

	plmkstrm (p_strm: POINTER) 
		do
			c_plmkstrm (p_strm)
		end

	plmtex (side: STRING; disp: REAL_64; pos: REAL_64; just: REAL_64; text: STRING) 
		do
			c_plmtex ( (create {C_STRING}.make (side)).item, disp, pos, just,  (create {C_STRING}.make (text)).item)
		end

	plmtex3 (side: STRING; disp: REAL_64; pos: REAL_64; just: REAL_64; text: STRING) 
		do
			c_plmtex3 ( (create {C_STRING}.make (side)).item, disp, pos, just,  (create {C_STRING}.make (text)).item)
		end

	plot3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; side: INTEGER) 
		do
			c_plot3d (x, y, z, nx, ny, opt, side)
		end

	plot3dc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_plot3dc (x, y, z, nx, ny, opt, clevel, nlevel)
		end

	plot3dcl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER) 
		do
			c_plot3dcl (x, y, z, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)
		end

	plpat (nlin: INTEGER; inc: POINTER; del: POINTER) 
		do
			c_plpat (nlin, inc, del)
		end

	plpath (n: INTEGER; x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plpath ((PLINT)$n, (PLFLT)$x1, (PLFLT)$y1, (PLFLT)$x2, (PLFLT)$y2);
			]"
		end

	plpoin (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER) 
		do
			c_plpoin (n, x, y, code)
		end

	plpoin3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; code: INTEGER) 
		do
			c_plpoin3 (n, x, y, z, code)
		end

	plpoly3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; draw: POINTER; ifcc: INTEGER) 
		do
			c_plpoly3 (n, x, y, z, draw, ifcc)
		end

	plprec (setp: INTEGER; prec: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plprec ((PLINT)$setp, (PLINT)$prec);
			]"
		end

	plpsty (patt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plpsty ((PLINT)$patt);
			]"
		end

	plptex (x: REAL_64; y: REAL_64; dx: REAL_64; dy: REAL_64; just: REAL_64; text: STRING) 
		do
			c_plptex (x, y, dx, dy, just,  (create {C_STRING}.make (text)).item)
		end

	plptex3 (wx: REAL_64; wy: REAL_64; wz: REAL_64; dx: REAL_64; dy: REAL_64; dz: REAL_64; sx: REAL_64; sy: REAL_64; sz: REAL_64; just: REAL_64; text: STRING) 
		do
			c_plptex3 (wx, wy, wz, dx, dy, dz, sx, sy, sz, just,  (create {C_STRING}.make (text)).item)
		end

	plrandd: REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plrandd ();
			]"
		end

	plreplot
		external
			"C inline use <plplot.h>"
		alias
			"[
				plreplot ();
			]"
		end

	plrgbhls (r: REAL_64; g: REAL_64; b: REAL_64; p_h: POINTER; p_l: POINTER; p_s: POINTER) 
		do
			c_plrgbhls (r, g, b, p_h, p_l, p_s)
		end

	plschr (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plschr ((PLFLT)$def, (PLFLT)$scale);
			]"
		end


	plscmap0a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol0: INTEGER) 
		do
			c_plscmap0a (r, g, b, alpha, ncol0)
		end

	plscmap0n (ncol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap0n ((PLINT)$ncol0);
			]"
		end

	plscmap1 (r: POINTER; g: POINTER; b: POINTER; ncol1: INTEGER) 
		do
			c_plscmap1 (r, g, b, ncol1)
		end

	plscmap1a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol1: INTEGER) 
		do
			c_plscmap1a (r, g, b, alpha, ncol1)
		end

	plscmap1l (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alt_hue_path: POINTER) 
		do
			c_plscmap1l (itype, npts, intensity, coord1, coord2, coord3, alt_hue_path)
		end

	plscmap1la (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alpha: POINTER; alt_hue_path: POINTER) 
		do
			c_plscmap1la (itype, npts, intensity, coord1, coord2, coord3, alpha, alt_hue_path)
		end

	plscmap1n (ncol1: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap1n ((PLINT)$ncol1);
			]"
		end

	plscmap1_range (min_color: REAL_64; max_color: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap1_range ((PLFLT)$min_color, (PLFLT)$max_color);
			]"
		end

	plscol0 (icol0: INTEGER; r: INTEGER; g: INTEGER; b: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscol0 ((PLINT)$icol0, (PLINT)$r, (PLINT)$g, (PLINT)$b);
			]"
		end

	plscol0a (icol0: INTEGER; r: INTEGER; g: INTEGER; b: INTEGER; alpha: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscol0a ((PLINT)$icol0, (PLINT)$r, (PLINT)$g, (PLINT)$b, (PLFLT)$alpha);
			]"
		end

	plscolbg (r: INTEGER; g: INTEGER; b: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscolbg ((PLINT)$r, (PLINT)$g, (PLINT)$b);
			]"
		end

	plscolbga (r: INTEGER; g: INTEGER; b: INTEGER; alpha: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscolbga ((PLINT)$r, (PLINT)$g, (PLINT)$b, (PLFLT)$alpha);
			]"
		end

	plscolor (color: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscolor ((PLINT)$color);
			]"
		end

	plscompression (compression: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscompression ((PLINT)$compression);
			]"
		end

	plsdev (devname: STRING) 
		do
			c_plsdev ( (create {C_STRING}.make (devname)).item)
		end

	plsdidev (mar: REAL_64; aspect: REAL_64; jx: REAL_64; jy: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdidev ((PLFLT)$mar, (PLFLT)$aspect, (PLFLT)$jx, (PLFLT)$jy);
			]"
		end

	plsdimap (dimxmin: INTEGER; dimxmax: INTEGER; dimymin: INTEGER; dimymax: INTEGER; dimxpmm: REAL_64; dimypmm: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdimap ((PLINT)$dimxmin, (PLINT)$dimxmax, (PLINT)$dimymin, (PLINT)$dimymax, (PLFLT)$dimxpmm, (PLFLT)$dimypmm);
			]"
		end

	plsdiori (rot: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdiori ((PLFLT)$rot);
			]"
		end

	plsdiplt (xmin: REAL_64; ymin: REAL_64; xmax: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdiplt ((PLFLT)$xmin, (PLFLT)$ymin, (PLFLT)$xmax, (PLFLT)$ymax);
			]"
		end

	plsdiplz (xmin: REAL_64; ymin: REAL_64; xmax: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdiplz ((PLFLT)$xmin, (PLFLT)$ymin, (PLFLT)$xmax, (PLFLT)$ymax);
			]"
		end

	plsdrawmode (mode: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdrawmode ((PLINT)$mode);
			]"
		end

	plseed (seed: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plseed ((unsigned int)$seed);
			]"
		end

	plsesc (esc: CHARACTER) 
		do
			c_plsesc (esc)
		end

	plsfam (fam: INTEGER; num: INTEGER; bmax: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsfam ((PLINT)$fam, (PLINT)$num, (PLINT)$bmax);
			]"
		end

	plsfci (fci: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsfci ((PLUNICODE)$fci);
			]"
		end

	plsfnam (fnam: STRING) 
		do
			c_plsfnam ( (create {C_STRING}.make (fnam)).item)
		end

	plsfont (family: INTEGER; style: INTEGER; weight: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsfont ((PLINT)$family, (PLINT)$style, (PLINT)$weight);
			]"
		end

	plshade (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plshade (a, nx, ny, defined, xmin, xmax, ymin, ymax, shade_min, shade_max, sh_cmap, sh_color, sh_width, min_color, min_width, max_color, max_width, fill, rectangular, pltr, pltr_data)
		end

	plshades (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; clevel: POINTER; nlevel: INTEGER; fill_width: REAL_64; cont_color: INTEGER; cont_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plshades (a, nx, ny, defined, xmin, xmax, ymin, ymax, clevel, nlevel, fill_width, cont_color, cont_width, fill, rectangular, pltr, pltr_data)
		end

	plslabelfunc (label_func: POINTER; label_data: POINTER) 
		do
			c_plslabelfunc (label_func, label_data)
		end

	plsmaj (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsmaj ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	plsmem (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER) 
		do
			c_plsmem (maxx, maxy, plotmem)
		end

	plsmema (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER) 
		do
			c_plsmema (maxx, maxy, plotmem)
		end

	plsmin (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsmin ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	plsori (ori: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsori ((PLINT)$ori);
			]"
		end

	plspage (xp: REAL_64; yp: REAL_64; xleng: INTEGER; yleng: INTEGER; xoff: INTEGER; yoff: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plspage ((PLFLT)$xp, (PLFLT)$yp, (PLINT)$xleng, (PLINT)$yleng, (PLINT)$xoff, (PLINT)$yoff);
			]"
		end

	plspal0 (filename: STRING) 
		do
			c_plspal0 ( (create {C_STRING}.make (filename)).item)
		end

	plspal1 (filename: STRING; interpolate: INTEGER) 
		do
			c_plspal1 ( (create {C_STRING}.make (filename)).item, interpolate)
		end

	plspause (pause: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plspause ((PLBOOL)$pause);
			]"
		end

	plsstrm (strm: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsstrm ((PLINT)$strm);
			]"
		end

	plssub (nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plssub ((PLINT)$nx, (PLINT)$ny);
			]"
		end

	plssym (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plssym ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	plstar (nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstar ((PLINT)$nx, (PLINT)$ny);
			]"
		end

	plstart (devname: STRING; nx: INTEGER; ny: INTEGER) 
		do
			c_plstart ( (create {C_STRING}.make (devname)).item, nx, ny)
		end

	plstransform (coordinate_transform: POINTER; coordinate_transform_data: POINTER) 
		do
			c_plstransform (coordinate_transform, coordinate_transform_data)
		end

	plstring (n: INTEGER; x: POINTER; y: POINTER; string: STRING) 
		do
			c_plstring (n, x, y,  (create {C_STRING}.make (string)).item)
		end

	plstring3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; string: STRING) 
		do
			c_plstring3 (n, x, y, z,  (create {C_STRING}.make (string)).item)
		end

	plstripa (id: INTEGER; pen: INTEGER; x: REAL_64; y: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstripa ((PLINT)$id, (PLINT)$pen, (PLFLT)$x, (PLFLT)$y);
			]"
		end

	plstripc (id: POINTER; xspec: STRING; yspec: STRING; xmin: REAL_64; xmax: REAL_64; xjump: REAL_64; ymin: REAL_64; ymax: REAL_64; xlpos: REAL_64; ylpos: REAL_64; y_ascl: INTEGER; acc: INTEGER; colbox: INTEGER; collab: INTEGER; colline: POINTER; styline: POINTER; legline: STRING; labx: STRING; laby: STRING; labtop: STRING) 
		do
			c_plstripc (id,  (create {C_STRING}.make (xspec)).item,  (create {C_STRING}.make (yspec)).item, xmin, xmax, xjump, ymin, ymax, xlpos, ylpos, y_ascl, acc, colbox, collab, colline, styline,  (create {C_STRING}.make (legline)).item,  (create {C_STRING}.make (labx)).item,  (create {C_STRING}.make (laby)).item,  (create {C_STRING}.make (labtop)).item)
		end

	plstripd (id: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstripd ((PLINT)$id);
			]"
		end

	plimagefr (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; valuemin: REAL_64; valuemax: REAL_64; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plimagefr (idata, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, valuemin, valuemax, pltr, pltr_data)
		end

	plimage (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; dxmin: REAL_64; dxmax: REAL_64; dymin: REAL_64; dymax: REAL_64) 
		do
			c_plimage (idata, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, dxmin, dxmax, dymin, dymax)
		end

	plstyl (nms: INTEGER; mark: POINTER; space: POINTER) 
		do
			c_plstyl (nms, mark, space)
		end



	plsvect (arrowx: POINTER; arrowy: POINTER; npts: INTEGER; fill: INTEGER) 
		do
			c_plsvect (arrowx, arrowy, npts, fill)
		end

	plsvpa (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsvpa ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax);
			]"
		end

	plsxax (digmax: INTEGER; digits: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsxax ((PLINT)$digmax, (PLINT)$digits);
			]"
		end

	plsyax (digmax: INTEGER; digits: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsyax ((PLINT)$digmax, (PLINT)$digits);
			]"
		end

	plsym (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER) 
		do
			c_plsym (n, x, y, code)
		end

	plszax (digmax: INTEGER; digits: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plszax ((PLINT)$digmax, (PLINT)$digits);
			]"
		end

	pltext
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltext ();
			]"
		end

	pltimefmt (fmt: STRING) 
		do
			c_pltimefmt ( (create {C_STRING}.make (fmt)).item)
		end

	plvasp (aspect: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plvasp ((PLFLT)$aspect);
			]"
		end

	plvect (u: POINTER; v: POINTER; nx: INTEGER; ny: INTEGER; scale: REAL_64; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plvect (u, v, nx, ny, scale, pltr, pltr_data)
		end

	plvpas (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; aspect: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plvpas ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$aspect);
			]"
		end

	plvpor (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plvpor ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax);
			]"
		end

	plvsta
		external
			"C inline use <plplot.h>"
		alias
			"[
				plvsta ();
			]"
		end

	plw3d (basex: REAL_64; basey: REAL_64; height: REAL_64; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; alt: REAL_64; az: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plw3d ((PLFLT)$basex, (PLFLT)$basey, (PLFLT)$height, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$alt, (PLFLT)$az);
			]"
		end

	plwidth (width: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plwidth ((PLFLT)$width);
			]"
		end

	plwind (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plwind ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax);
			]"
		end

	plxormod (mode: INTEGER; status: POINTER) 
		do
			c_plxormod (mode, status)
		end


	plsetopt (opt: STRING; optarg: STRING): INTEGER 
		do
			Result := c_plsetopt ( (create {C_STRING}.make (opt)).item,  (create {C_STRING}.make (optarg)).item)
		end

	plparseopts (p_argc: POINTER; argv: STRING; mode: INTEGER): INTEGER 
		do
			Result := c_plparseopts (p_argc,  (create {C_STRING}.make (argv)).item, mode)
		end

	pl_static2d_grid (ziliffe: POINTER; zstatic: POINTER; nx: INTEGER; ny: INTEGER) 
		do
			c_pl_static2d_grid (ziliffe, zstatic, nx, ny)
		end

	pl_alloc2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER) 
		do
			c_pl_alloc2d_grid (f, nx, ny)
		end

	pl_free2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER) 
		do
			c_pl_free2d_grid (f, nx, ny)
		end

	pl_min_max2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER; fmax: POINTER; fmin: POINTER) 
		do
			c_pl_min_max2d_grid (f, nx, ny, fmax, fmin)
		end

feature -- Externals

	c_plaxes (x0: REAL_64; y0: REAL_64; xopt: POINTER; xtick: REAL_64; nxsub: INTEGER; yopt: POINTER; ytick: REAL_64; nysub: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plaxes ((PLFLT)$x0, (PLFLT)$y0, (PLCHAR_VECTOR)$xopt, (PLFLT)$xtick, (PLINT)$nxsub, (PLCHAR_VECTOR)$yopt, (PLFLT)$ytick, (PLINT)$nysub);
			]"
		end

	c_plbin (nbin: INTEGER; x: POINTER; y: POINTER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plbin ((PLINT)$nbin, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLINT)$opt);
			]"
		end

	c_plbtime (year: POINTER; month: POINTER; day: POINTER; hour: POINTER; min: POINTER; sec: POINTER; ctime: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plbtime ((PLINT_NC_SCALAR)$year, (PLINT_NC_SCALAR)$month, (PLINT_NC_SCALAR)$day, (PLINT_NC_SCALAR)$hour, (PLINT_NC_SCALAR)$min, (PLFLT_NC_SCALAR)$sec, (PLFLT)$ctime);
			]"
		end

	c_plbox (xopt: POINTER; xtick: REAL_64; nxsub: INTEGER; yopt: POINTER; ytick: REAL_64; nysub: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plbox ((PLCHAR_VECTOR)$xopt, (PLFLT)$xtick, (PLINT)$nxsub, (PLCHAR_VECTOR)$yopt, (PLFLT)$ytick, (PLINT)$nysub);
			]"
		end

	c_plbox3 (xopt: POINTER; xlabel: POINTER; xtick: REAL_64; nxsub: INTEGER; yopt: POINTER; ylabel: POINTER; ytick: REAL_64; nysub: INTEGER; zopt: POINTER; zlabel: POINTER; ztick: REAL_64; nzsub: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plbox3 ((PLCHAR_VECTOR)$xopt, (PLCHAR_VECTOR)$xlabel, (PLFLT)$xtick, (PLINT)$nxsub, (PLCHAR_VECTOR)$yopt, (PLCHAR_VECTOR)$ylabel, (PLFLT)$ytick, (PLINT)$nysub, (PLCHAR_VECTOR)$zopt, (PLCHAR_VECTOR)$zlabel, (PLFLT)$ztick, (PLINT)$nzsub);
			]"
		end

	c_plcalc_world (rx: REAL_64; ry: REAL_64; wx: POINTER; wy: POINTER; window: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plcalc_world ((PLFLT)$rx, (PLFLT)$ry, (PLFLT_NC_SCALAR)$wx, (PLFLT_NC_SCALAR)$wy, (PLINT_NC_SCALAR)$window);
			]"
		end

	c_plcont (f: POINTER; nx: INTEGER; ny: INTEGER; kx: INTEGER; lx: INTEGER; ky: INTEGER; ly: INTEGER; clevel: POINTER; nlevel: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plcont ((PLFLT_MATRIX)$f, (PLINT)$nx, (PLINT)$ny, (PLINT)$kx, (PLINT)$lx, (PLINT)$ky, (PLINT)$ly, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plctime (year: INTEGER; month: INTEGER; day: INTEGER; hour: INTEGER; min: INTEGER; sec: REAL_64; ctime: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plctime ((PLINT)$year, (PLINT)$month, (PLINT)$day, (PLINT)$hour, (PLINT)$min, (PLFLT)$sec, (PLFLT_NC_SCALAR)$ctime);
			]"
		end

	c_plerrx (n: INTEGER; xmin: POINTER; xmax: POINTER; y: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plerrx ((PLINT)$n, (PLFLT_VECTOR)$xmin, (PLFLT_VECTOR)$xmax, (PLFLT_VECTOR)$y);
			]"
		end

	c_plerry (n: INTEGER; x: POINTER; ymin: POINTER; ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plerry ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$ymin, (PLFLT_VECTOR)$ymax);
			]"
		end

	c_plfill (n: INTEGER; x: POINTER; y: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfill ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y);
			]"
		end

	c_plfill3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfill3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z);
			]"
		end

	c_plgchr (p_def: POINTER; p_ht: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgchr ((PLFLT_NC_SCALAR)$p_def, (PLFLT_NC_SCALAR)$p_ht);
			]"
		end

	c_plgcmap1_range (min_color: POINTER; max_color: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgcmap1_range ((PLFLT_NC_SCALAR)$min_color, (PLFLT_NC_SCALAR)$max_color);
			]"
		end

	c_plgcol0 (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgcol0 ((PLINT)$icol0, (PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b);
			]"
		end

	c_plgcol0a (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER; alpha: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgcol0a ((PLINT)$icol0, (PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b, (PLFLT_NC_SCALAR)$alpha);
			]"
		end

	c_plgcolbg (r: POINTER; g: POINTER; b: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgcolbg ((PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b);
			]"
		end

	c_plgcolbga (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgcolbga ((PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b, (PLFLT_NC_SCALAR)$alpha);
			]"
		end

	c_plgcompression (compression: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgcompression ((PLINT_NC_SCALAR)$compression);
			]"
		end

	c_plgdev (p_dev: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgdev ((PLCHAR_NC_VECTOR)$p_dev);
			]"
		end

	c_plgdidev (p_mar: POINTER; p_aspect: POINTER; p_jx: POINTER; p_jy: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgdidev ((PLFLT_NC_SCALAR)$p_mar, (PLFLT_NC_SCALAR)$p_aspect, (PLFLT_NC_SCALAR)$p_jx, (PLFLT_NC_SCALAR)$p_jy);
			]"
		end

	c_plgdiori (p_rot: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgdiori ((PLFLT_NC_SCALAR)$p_rot);
			]"
		end

	c_plgdiplt (p_xmin: POINTER; p_ymin: POINTER; p_xmax: POINTER; p_ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgdiplt ((PLFLT_NC_SCALAR)$p_xmin, (PLFLT_NC_SCALAR)$p_ymin, (PLFLT_NC_SCALAR)$p_xmax, (PLFLT_NC_SCALAR)$p_ymax);
			]"
		end

	c_plgfci (p_fci: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgfci ((PLUNICODE_NC_SCALAR)$p_fci);
			]"
		end

	c_plgfam (p_fam: POINTER; p_num: POINTER; p_bmax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgfam ((PLINT_NC_SCALAR)$p_fam, (PLINT_NC_SCALAR)$p_num, (PLINT_NC_SCALAR)$p_bmax);
			]"
		end

	c_plgfnam (fnam: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgfnam ((PLCHAR_NC_VECTOR)$fnam);
			]"
		end

	c_plgfont (p_family: POINTER; p_style: POINTER; p_weight: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgfont ((PLINT_NC_SCALAR)$p_family, (PLINT_NC_SCALAR)$p_style, (PLINT_NC_SCALAR)$p_weight);
			]"
		end

	c_plglevel (p_level: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plglevel ((PLINT_NC_SCALAR)$p_level);
			]"
		end

	c_plgpage (p_xp: POINTER; p_yp: POINTER; p_xleng: POINTER; p_yleng: POINTER; p_xoff: POINTER; p_yoff: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgpage ((PLFLT_NC_SCALAR)$p_xp, (PLFLT_NC_SCALAR)$p_yp, (PLINT_NC_SCALAR)$p_xleng, (PLINT_NC_SCALAR)$p_yleng, (PLINT_NC_SCALAR)$p_xoff, (PLINT_NC_SCALAR)$p_yoff);
			]"
		end

	c_plgradient (n: INTEGER; x: POINTER; y: POINTER; angle: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgradient ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT)$angle);
			]"
		end

	c_plgriddata (x: POINTER; y: POINTER; z: POINTER; npts: INTEGER; xg: POINTER; nptsx: INTEGER; yg: POINTER; nptsy: INTEGER; zg: POINTER; type: INTEGER; data: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgriddata ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLINT)$npts, (PLFLT_VECTOR)$xg, (PLINT)$nptsx, (PLFLT_VECTOR)$yg, (PLINT)$nptsy, (PLFLT_NC_MATRIX)$zg, (PLINT)$type, (PLFLT)$data);
			]"
		end

	c_plgspa (xmin: POINTER; xmax: POINTER; ymin: POINTER; ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgspa ((PLFLT_NC_SCALAR)$xmin, (PLFLT_NC_SCALAR)$xmax, (PLFLT_NC_SCALAR)$ymin, (PLFLT_NC_SCALAR)$ymax);
			]"
		end

	c_plgstrm (p_strm: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgstrm ((PLINT_NC_SCALAR)$p_strm);
			]"
		end

	c_plgver (p_ver: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgver ((PLCHAR_NC_VECTOR)$p_ver);
			]"
		end

	c_plgvpd (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgvpd ((PLFLT_NC_SCALAR)$p_xmin, (PLFLT_NC_SCALAR)$p_xmax, (PLFLT_NC_SCALAR)$p_ymin, (PLFLT_NC_SCALAR)$p_ymax);
			]"
		end

	c_plgvpw (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgvpw ((PLFLT_NC_SCALAR)$p_xmin, (PLFLT_NC_SCALAR)$p_xmax, (PLFLT_NC_SCALAR)$p_ymin, (PLFLT_NC_SCALAR)$p_ymax);
			]"
		end

	c_plgxax (p_digmax: POINTER; p_digits: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgxax ((PLINT_NC_SCALAR)$p_digmax, (PLINT_NC_SCALAR)$p_digits);
			]"
		end

	c_plgyax (p_digmax: POINTER; p_digits: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgyax ((PLINT_NC_SCALAR)$p_digmax, (PLINT_NC_SCALAR)$p_digits);
			]"
		end

	c_plgzax (p_digmax: POINTER; p_digits: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgzax ((PLINT_NC_SCALAR)$p_digmax, (PLINT_NC_SCALAR)$p_digits);
			]"
		end

	c_plhist (n: INTEGER; data: POINTER; datmin: REAL_64; datmax: REAL_64; nbin: INTEGER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plhist ((PLINT)$n, (PLFLT_VECTOR)$data, (PLFLT)$datmin, (PLFLT)$datmax, (PLINT)$nbin, (PLINT)$opt);
			]"
		end

	c_plhlsrgb (h: REAL_64; l: REAL_64; s: REAL_64; p_r: POINTER; p_g: POINTER; p_b: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plhlsrgb ((PLFLT)$h, (PLFLT)$l, (PLFLT)$s, (PLFLT_NC_SCALAR)$p_r, (PLFLT_NC_SCALAR)$p_g, (PLFLT_NC_SCALAR)$p_b);
			]"
		end

	c_pllab (xlabel: POINTER; ylabel: POINTER; tlabel: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pllab ((PLCHAR_VECTOR)$xlabel, (PLCHAR_VECTOR)$ylabel, (PLCHAR_VECTOR)$tlabel);
			]"
		end

	c_pllegend (p_legend_width: POINTER; p_legend_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; plot_width: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; nrow: INTEGER; ncolumn: INTEGER; nlegend: INTEGER; opt_array: POINTER; text_offset: REAL_64; text_scale: REAL_64; text_spacing: REAL_64; text_justification: REAL_64; text_colors: POINTER; text: POINTER; box_colors: POINTER; box_patterns: POINTER; box_scales: POINTER; box_line_widths: POINTER; line_colors: POINTER; line_styles: POINTER; line_widths: POINTER; symbol_colors: POINTER; symbol_scales: POINTER; symbol_numbers: POINTER; symbols: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pllegend ((PLFLT_NC_SCALAR)$p_legend_width, (PLFLT_NC_SCALAR)$p_legend_height, (PLINT)$opt, (PLINT)$position, (PLFLT)$x, (PLFLT)$y, (PLFLT)$plot_width, (PLINT)$bg_color, (PLINT)$bb_color, (PLINT)$bb_style, (PLINT)$nrow, (PLINT)$ncolumn, (PLINT)$nlegend, (PLINT_VECTOR)$opt_array, (PLFLT)$text_offset, (PLFLT)$text_scale, (PLFLT)$text_spacing, (PLFLT)$text_justification, (PLINT_VECTOR)$text_colors, (PLCHAR_MATRIX)$text, (PLINT_VECTOR)$box_colors, (PLINT_VECTOR)$box_patterns, (PLFLT_VECTOR)$box_scales, (PLFLT_VECTOR)$box_line_widths, (PLINT_VECTOR)$line_colors, (PLINT_VECTOR)$line_styles, (PLFLT_VECTOR)$line_widths, (PLINT_VECTOR)$symbol_colors, (PLFLT_VECTOR)$symbol_scales, (PLINT_VECTOR)$symbol_numbers, (PLCHAR_MATRIX)$symbols);
			]"
		end

	c_plcolorbar (p_colorbar_width: POINTER; p_colorbar_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; x_length: REAL_64; y_length: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; low_cap_color: REAL_64; high_cap_color: REAL_64; cont_color: INTEGER; cont_width: REAL_64; n_labels: INTEGER; label_opts: POINTER; labels: POINTER; n_axes: INTEGER; axis_opts: POINTER; ticks: POINTER; sub_ticks: POINTER; n_values: POINTER; values: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plcolorbar ((PLFLT_NC_SCALAR)$p_colorbar_width, (PLFLT_NC_SCALAR)$p_colorbar_height, (PLINT)$opt, (PLINT)$position, (PLFLT)$x, (PLFLT)$y, (PLFLT)$x_length, (PLFLT)$y_length, (PLINT)$bg_color, (PLINT)$bb_color, (PLINT)$bb_style, (PLFLT)$low_cap_color, (PLFLT)$high_cap_color, (PLINT)$cont_color, (PLFLT)$cont_width, (PLINT)$n_labels, (PLINT_VECTOR)$label_opts, (PLCHAR_MATRIX)$labels, (PLINT)$n_axes, (PLCHAR_MATRIX)$axis_opts, (PLFLT_VECTOR)$ticks, (PLINT_VECTOR)$sub_ticks, (PLINT_VECTOR)$n_values, (PLFLT_MATRIX)$values);
			]"
		end

	c_plline (n: INTEGER; x: POINTER; y: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plline ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y);
			]"
		end

	c_plline3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plline3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z);
			]"
		end

	c_plmap (mapform: POINTER; name: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmap ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy);
			]"
		end

	c_plmapline (mapform: POINTER; name: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmapline ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT_VECTOR)$plotentries, (PLINT)$nplotentries);
			]"
		end

	c_plmapstring (mapform: POINTER; name: POINTER; string: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmapstring ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLCHAR_VECTOR)$string, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT_VECTOR)$plotentries, (PLINT)$nplotentries);
			]"
		end

	c_plmaptex (mapform: POINTER; name: POINTER; dx: REAL_64; dy: REAL_64; just: REAL_64; text: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentry: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmaptex ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$dx, (PLFLT)$dy, (PLFLT)$just, (PLCHAR_VECTOR)$text, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT)$plotentry);
			]"
		end

	c_plmapfill (mapform: POINTER; name: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmapfill ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT_VECTOR)$plotentries, (PLINT)$nplotentries);
			]"
		end

	c_plmeridians (mapform: POINTER; dlong: REAL_64; dlat: REAL_64; minlong: REAL_64; maxlong: REAL_64; minlat: REAL_64; maxlat: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmeridians ((PLMAPFORM_callback)$mapform, (PLFLT)$dlong, (PLFLT)$dlat, (PLFLT)$minlong, (PLFLT)$maxlong, (PLFLT)$minlat, (PLFLT)$maxlat);
			]"
		end

	c_plmesh (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmesh ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt);
			]"
		end

	c_plmeshc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmeshc ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_plmkstrm (p_strm: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmkstrm ((PLINT_NC_SCALAR)$p_strm);
			]"
		end

	c_plmtex (side: POINTER; disp: REAL_64; pos: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmtex ((PLCHAR_VECTOR)$side, (PLFLT)$disp, (PLFLT)$pos, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_plmtex3 (side: POINTER; disp: REAL_64; pos: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plmtex3 ((PLCHAR_VECTOR)$side, (PLFLT)$disp, (PLFLT)$pos, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_plot3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; side: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plot3d ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLBOOL)$side);
			]"
		end

	c_plot3dc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plot3dc ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_plot3dcl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plot3dcl ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLINT)$indexxmin, (PLINT)$indexxmax, (PLINT_VECTOR)$indexymin, (PLINT_VECTOR)$indexymax);
			]"
		end

	c_plpat (nlin: INTEGER; inc: POINTER; del: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plpat ((PLINT)$nlin, (PLINT_VECTOR)$inc, (PLINT_VECTOR)$del);
			]"
		end

	c_plpoin (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plpoin ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLINT)$code);
			]"
		end

	c_plpoin3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plpoin3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLINT)$code);
			]"
		end

	c_plpoly3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; draw: POINTER; ifcc: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plpoly3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLBOOL_VECTOR)$draw, (PLBOOL)$ifcc);
			]"
		end

	c_plptex (x: REAL_64; y: REAL_64; dx: REAL_64; dy: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plptex ((PLFLT)$x, (PLFLT)$y, (PLFLT)$dx, (PLFLT)$dy, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_plptex3 (wx: REAL_64; wy: REAL_64; wz: REAL_64; dx: REAL_64; dy: REAL_64; dz: REAL_64; sx: REAL_64; sy: REAL_64; sz: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plptex3 ((PLFLT)$wx, (PLFLT)$wy, (PLFLT)$wz, (PLFLT)$dx, (PLFLT)$dy, (PLFLT)$dz, (PLFLT)$sx, (PLFLT)$sy, (PLFLT)$sz, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_plrgbhls (r: REAL_64; g: REAL_64; b: REAL_64; p_h: POINTER; p_l: POINTER; p_s: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plrgbhls ((PLFLT)$r, (PLFLT)$g, (PLFLT)$b, (PLFLT_NC_SCALAR)$p_h, (PLFLT_NC_SCALAR)$p_l, (PLFLT_NC_SCALAR)$p_s);
			]"
		end

	c_plscmap0 (r: POINTER; g: POINTER; b: POINTER; ncol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap0 ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLINT)$ncol0);
			]"
		end

	c_plscmap0a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap0a ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLFLT_VECTOR)$alpha, (PLINT)$ncol0);
			]"
		end

	c_plscmap1 (r: POINTER; g: POINTER; b: POINTER; ncol1: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap1 ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLINT)$ncol1);
			]"
		end

	c_plscmap1a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol1: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap1a ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLFLT_VECTOR)$alpha, (PLINT)$ncol1);
			]"
		end

	c_plscmap1l (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alt_hue_path: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap1l ((PLBOOL)$itype, (PLINT)$npts, (PLFLT_VECTOR)$intensity, (PLFLT_VECTOR)$coord1, (PLFLT_VECTOR)$coord2, (PLFLT_VECTOR)$coord3, (PLBOOL_VECTOR)$alt_hue_path);
			]"
		end

	c_plscmap1la (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alpha: POINTER; alt_hue_path: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plscmap1la ((PLBOOL)$itype, (PLINT)$npts, (PLFLT_VECTOR)$intensity, (PLFLT_VECTOR)$coord1, (PLFLT_VECTOR)$coord2, (PLFLT_VECTOR)$coord3, (PLFLT_VECTOR)$alpha, (PLBOOL_VECTOR)$alt_hue_path);
			]"
		end

	c_plsdev (devname: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdev ((PLCHAR_VECTOR)$devname);
			]"
		end

	c_plsesc (esc: CHARACTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsesc ((char)$esc);
			]"
		end

	c_plsfnam (fnam: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsfnam ((PLCHAR_VECTOR)$fnam);
			]"
		end

	c_plshade (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plshade ((PLFLT_MATRIX)$a, (PLINT)$nx, (PLINT)$ny, (PLDEFINED_callback)$defined, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$shade_min, (PLFLT)$shade_max, (PLINT)$sh_cmap, (PLFLT)$sh_color, (PLFLT)$sh_width, (PLINT)$min_color, (PLFLT)$min_width, (PLINT)$max_color, (PLFLT)$max_width, (PLFILL_callback)$fill, (PLBOOL)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plshades (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; clevel: POINTER; nlevel: INTEGER; fill_width: REAL_64; cont_color: INTEGER; cont_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plshades ((PLFLT_MATRIX)$a, (PLINT)$nx, (PLINT)$ny, (PLDEFINED_callback)$defined, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLFLT)$fill_width, (PLINT)$cont_color, (PLFLT)$cont_width, (PLFILL_callback)$fill, (PLBOOL)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plslabelfunc (label_func: POINTER; label_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plslabelfunc ((PLLABEL_FUNC_callback)$label_func, (PLPointer)$label_data);
			]"
		end

	c_plsmem (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsmem ((PLINT)$maxx, (PLINT)$maxy, (PLPointer)$plotmem);
			]"
		end

	c_plsmema (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsmema ((PLINT)$maxx, (PLINT)$maxy, (PLPointer)$plotmem);
			]"
		end

	c_plspal0 (filename: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plspal0 ((PLCHAR_VECTOR)$filename);
			]"
		end

	c_plspal1 (filename: POINTER; interpolate: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plspal1 ((PLCHAR_VECTOR)$filename, (PLBOOL)$interpolate);
			]"
		end

	c_plstart (devname: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstart ((PLCHAR_VECTOR)$devname, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_plstransform (coordinate_transform: POINTER; coordinate_transform_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstransform ((PLTRANSFORM_callback)$coordinate_transform, (PLPointer)$coordinate_transform_data);
			]"
		end

	c_plstring (n: INTEGER; x: POINTER; y: POINTER; string: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstring ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLCHAR_VECTOR)$string);
			]"
		end

	c_plstring3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; string: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstring3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLCHAR_VECTOR)$string);
			]"
		end

	c_plstripc (id: POINTER; xspec: POINTER; yspec: POINTER; xmin: REAL_64; xmax: REAL_64; xjump: REAL_64; ymin: REAL_64; ymax: REAL_64; xlpos: REAL_64; ylpos: REAL_64; y_ascl: INTEGER; acc: INTEGER; colbox: INTEGER; collab: INTEGER; colline: POINTER; styline: POINTER; legline: POINTER; labx: POINTER; laby: POINTER; labtop: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstripc ((PLINT_NC_SCALAR)$id, (PLCHAR_VECTOR)$xspec, (PLCHAR_VECTOR)$yspec, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$xjump, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$xlpos, (PLFLT)$ylpos, (PLBOOL)$y_ascl, (PLBOOL)$acc, (PLINT)$colbox, (PLINT)$collab, (PLINT_VECTOR)$colline, (PLINT_VECTOR)$styline, (PLCHAR_MATRIX)$legline, (PLCHAR_VECTOR)$labx, (PLCHAR_VECTOR)$laby, (PLCHAR_VECTOR)$labtop);
			]"
		end

	c_plimagefr (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; valuemin: REAL_64; valuemax: REAL_64; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plimagefr ((PLFLT_MATRIX)$idata, (PLINT)$nx, (PLINT)$ny, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$valuemin, (PLFLT)$valuemax, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plimage (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; dxmin: REAL_64; dxmax: REAL_64; dymin: REAL_64; dymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plimage ((PLFLT_MATRIX)$idata, (PLINT)$nx, (PLINT)$ny, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$dxmin, (PLFLT)$dxmax, (PLFLT)$dymin, (PLFLT)$dymax);
			]"
		end

	c_plstyl (nms: INTEGER; mark: POINTER; space: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plstyl ((PLINT)$nms, (PLINT_VECTOR)$mark, (PLINT_VECTOR)$space);
			]"
		end

	c_plsurf3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsurf3d ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_plsurf3dl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsurf3dl ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLINT)$indexxmin, (PLINT)$indexxmax, (PLINT_VECTOR)$indexymin, (PLINT_VECTOR)$indexymax);
			]"
		end

	c_plsvect (arrowx: POINTER; arrowy: POINTER; npts: INTEGER; fill: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsvect ((PLFLT_VECTOR)$arrowx, (PLFLT_VECTOR)$arrowy, (PLINT)$npts, (PLBOOL)$fill);
			]"
		end

	c_plsym (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsym ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLINT)$code);
			]"
		end

	c_pltimefmt (fmt: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltimefmt ((PLCHAR_VECTOR)$fmt);
			]"
		end

	c_plvect (u: POINTER; v: POINTER; nx: INTEGER; ny: INTEGER; scale: REAL_64; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plvect ((PLFLT_MATRIX)$u, (PLFLT_MATRIX)$v, (PLINT)$nx, (PLINT)$ny, (PLFLT)$scale, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plxormod (mode: INTEGER; status: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plxormod ((PLBOOL)$mode, (PLBOOL_NC_SCALAR)$status);
			]"
		end

	c_pls_error (errcode: POINTER; errmsg: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsError ((PLINT_NC_SCALAR)$errcode, (PLCHAR_NC_VECTOR)$errmsg);
			]"
		end

	c_plsetopt (opt: POINTER; optarg: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plsetopt ((PLCHAR_VECTOR)$opt, (PLCHAR_VECTOR)$optarg);
			]"
		end

	c_plparseopts (p_argc: POINTER; argv: POINTER; mode: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plparseopts ((int*)$p_argc, (PLCHAR_NC_MATRIX)$argv, (PLINT)$mode);
			]"
		end

	c_pl_static2d_grid (ziliffe: POINTER; zstatic: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plStatic2dGrid ((PLFLT_NC_MATRIX)$ziliffe, (PLFLT_VECTOR)$zstatic, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_pl_alloc2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plAlloc2dGrid ((PLFLT_NC_MATRIX*)$f, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_pl_free2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plFree2dGrid ((PLFLT_NC_MATRIX)$f, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_pl_min_max2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER; fmax: POINTER; fmin: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plMinMax2dGrid ((PLFLT_MATRIX)$f, (PLINT)$nx, (PLINT)$ny, (PLFLT_NC_SCALAR)$fmax, (PLFLT_NC_SCALAR)$fmin);
			]"
		end

feature -- Externals Address

end


